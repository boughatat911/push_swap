#include "push_swap.h"

void    sort_2(t_list **stack)
{
    t_list *tmp;

    tmp = *stack;
    tmp = tmp->next;
    if (tmp->content < (*stack)->content)
        sa(stack);
}

void    sort_3(t_list **stack)
{
    if (!stack || !*stack)
        return;

    int one = (*stack)->content;
    int two = (*stack)->next->content;
    int three = (*stack)->next->next->content;

    if (one > two && two > three)
    {
        sa(stack);
        rra(stack);
    }
    else if (one > two && one > three && two < three)
        ra(stack);
    else if (one < two && one > three && two > three)
        rra(stack);
    else if (one > two && one < three && two < three)
        sa(stack);
    else if (one < two && one < three && two > three)
    {
        sa(stack);
        ra(stack);
    }
}

void    sort_5(t_list **stack)
{
    t_list *stack_b;
    t_list *stack_a;
    int i;

    i = 0;
    stack_b = NULL;
    stack_a = *stack;
    while (!(stack_a->index == 0))
        (stack_a = stack_a->next, i++);
    stack_a = *stack;
    while (i > 0)
        (ra(&stack_a), i--);
    pb(&stack_a, &stack_b);
    i = 0;
    *stack = stack_a;
    while (!(stack_a->index == 1))
        (stack_a = stack_a->next, i++);
    stack_a = *stack;
    while (i > 0)
        (ra(&stack_a), i--);
    pb(&stack_a, &stack_b);
    sort_3(&stack_a);
    pa(&stack_b, &stack_a);
    pa(&stack_b, &stack_a);
    sort_2(&stack_a);
    *stack = stack_a;
}

